#ifndef FIFO_H
#define FIFO_H

/////////////////////////////////////////////////////////////////
// bibliotecas
/////////////////////////////////////////////////////////////////
// nativas

// usuário
#include "plomodefs.h"
/////////////////////////////////////////////////////////////////
// definições
/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////
// dados personalizados, enumerações
/////////////////////////////////////////////////////////////////
typedef struct tagFIFO
{
    uint8_t size;       /// tamanho do buffer, em bytes.
    uint8_t *buffer;    /// ponteiro para o array externo.
    uint8_t readIndex;  /// índice de leitura.
    uint8_t writeIndex; /// índice de escrita.
} Fifo;
/////////////////////////////////////////////////////////////////
// variáveis globais
/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////
// macros
/////////////////////////////////////////////////////////////////
/**
*  \def INIT_FIFO(fifo, buffer)
*   @brief      Inicializa e assimila o objeto \a fifo ao array externo \a buffer.
*   @param      fifo objeto FIFO.
*   @param      extBuffer array externo (uint8_t[]) com sizeof() entre 2 e 255.
*/
#define INIT_FIFO(fifo, extBuffer) \
    do{ \
    fifo.buffer = extBuffer; \
    fifo.size = sizeof(extBuffer); \
    fifo.readIndex = fifo.writeIndex = 0; \
    }while(0)

/////////////////////////////////////////////////////////////////
// protótipo das funções públicas
/////////////////////////////////////////////////////////////////
uint8_t fifo_data_length(Fifo *fifo);
bool fifo_push(Fifo *fifo, uint8_t data);
bool fifo_pull(Fifo *fifo, uint8_t *data);

#endif // FIFO_H
